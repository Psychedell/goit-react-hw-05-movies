{"version":3,"file":"static/js/779.60691472.chunk.js","mappings":"4QAEaA,EAAOC,EAAAA,GAAAA,GAAH,qEAKJC,EAAaD,EAAAA,GAAAA,EAAH,iE,SC0CvB,EA5CgB,WACd,OAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAAYH,EACb,GAAE,CAACA,IAEJ,IAAMG,EAAW,mCAAG,WAAMH,GAAN,mGAEWI,EAAAA,EAAAA,IAAgBJ,GAF3B,UAEVK,EAFU,OAQW,KAJrBP,EAAcO,EAAaC,QAAQC,KAAI,YAE3C,MADiB,CAAEC,OADiD,EAAtBA,OACnBC,QADyC,EAAdA,QAGvD,KACeC,OARA,uBASdC,QAAQC,IAAI,wDATE,0BAYhBb,EAAeD,GAZC,kDAchBa,QAAQC,IAAI,2CAdI,0DAAH,sDAkBjB,OACE,8BACc,OAAXd,QAAW,IAAXA,GAAAA,EAAaY,QACZ,wBACGZ,EAAYS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACf,UAACf,EAAD,YACE,UAACE,EAAD,sBAAqBY,MACrB,uBAAIC,MAFKD,EADI,OAQnB,oEAIP,C,6LC7CKK,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,2GAAOC,EAAP,+BAAkB,GAAIC,EAAtB,+BAAoC,GAApC,kBAEOH,EAAAA,GAAAA,IAAA,UAClBE,EADkB,oBACEH,EADF,YACaI,IAHpB,cAEVC,EAFU,yBAMTA,EAASC,MANA,gCAQhB,IAAIC,MAAM,aARM,yDAAH,qDAYJC,EAAc,WAEzB,OAAON,EADU,sBAElB,EAEYO,EAAW,SAAAtB,GACtB,IAAMgB,EAAQ,gBAAYhB,GAC1B,OAAOe,EAAYC,EACpB,EAEYO,EAAe,SAAAvB,GAC1B,IAAMgB,EAAQ,gBAAYhB,EAAZ,YACd,OAAOe,EAAYC,EACpB,EAEYZ,EAAkB,SAAAJ,GAC7B,IAAMgB,EAAQ,gBAAYhB,EAAZ,YACd,OAAOe,EAAYC,EACpB,EAEYQ,EAAiB,SAAAC,GAC5B,IACMR,EAAW,iBAAaQ,GAC9B,OAAOV,EAFO,eAEeE,EAC9B,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  border: 1px solid grey;\n  padding: 30px;\n`;\n\nexport const TextAuthor = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n`;\n","import { getMovieReviews } from 'services/Api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Item, TextAuthor } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviewsList, setReviewsList] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    loadReviews(movieId);\n  }, [movieId]);\n\n  const loadReviews = async movieId => {\n    try {\n      const responseData = await getMovieReviews(movieId);\n\n      const reviewsList = responseData.results.map(({ author, content }) => {\n        const castItem = { author, content };\n        return castItem;\n      });\n      if (reviewsList.length === 0) {\n        console.log('Sorry, there are no reviews information by this film');\n        return;\n      }\n      setReviewsList(reviewsList);\n    } catch (error) {\n      console.log('Something went wrong. Please try again.');\n    }\n  };\n\n  return (\n    <>\n      {reviewsList?.length ? (\n        <ul>\n          {reviewsList.map(({ author, content }) => (\n            <Item key={author}>\n              <TextAuthor>AUTHOR: {author}</TextAuthor>\n              <p>{content}</p>\n            </Item>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this film</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'e0db436e7fdd91f6353b0e62897529c1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (pathName = '', queryString = '') => {\n  try {\n    const response = await axios.get(\n      `${pathName}?api_key=${API_KEY}&${queryString}`\n    );\n\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n};\n\nexport const getTrending = () => {\n  const pathName = '/trending/movie/day';\n  return fetchMovies(pathName);\n};\n\nexport const getMovie = movieId => {\n  const pathName = `movie/${movieId}`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieCast = movieId => {\n  const pathName = `movie/${movieId}/credits`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieReviews = movieId => {\n  const pathName = `movie/${movieId}/reviews`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieSearch = query => {\n  const pathName = `search/movie`;\n  const queryString = `&query=${query}`;\n  return fetchMovies(pathName, queryString);\n};\n"],"names":["Item","styled","TextAuthor","useState","reviewsList","setReviewsList","movieId","useParams","useEffect","loadReviews","getMovieReviews","responseData","results","map","author","content","length","console","log","API_KEY","axios","fetchMovies","pathName","queryString","response","data","Error","getTrending","getMovie","getMovieCast","getMovieSearch","query"],"sourceRoot":""}